#!/bin/sh
# vim:set sw=2 ts=2 sts=2 et ai:
#
# This is sent to GUEST VM and executed from GUEST VM
#
BASEPACKAGES="sudo aptitude vim nano- avahi-utils auto-apt-proxy"
BASEPACKAGES="$BASEPACKAGES gpm screen git openssh-server openssh-client"
#############################################################################
# Trick code to become root while keeping user name as USERNAME
if [ "$(id -u)" != "0" ]; then
  USERNAME="$(id -un)"
  export USERNAME
  echo "Please enter root password to become root."
  su -w "USERNAME" -c "exec $0 $*"
  exit 0
fi
#############################################################################
if [ -z "$USERNAME" ]; then
  echo "You should start this from non-root primary user account"
  exit 1
fi

if [ -z "$1" ]; then
  echo "You may start this as '${0##*/} HOSTNAME'"
  echo
  echo "Please enter host name to use:"
  read -r HOSTNAME
  echo
else
  HOSTNAME="$1"
  shift
fi
if [ -z "$1" ]; then
  echo "You may start this as '${0##*/} HOSTNAME PACKAGES...'"
  echo
  echo "Please enter additional packages to install if you have one (e.g., task-gnome-desktop):"
  read -r PACKAGES
  echo
else
  PACKAGES="$*"
fi
if [ "$HOSTNAME" = "${HOSTNAME#sid}" ]; then
  # original $1 starts with sid
  cat >/etc/apt/source.list <<EOF
deb http://deb.debian.org/debian/ sid main
deb-src http://deb.debian.org/debian/ sid main
EOF
  fi

apt update
apt dist-upgrade
apt autoremove
# shellcheck disable=SC2086
apt install $BASEPACKAGES $PACKAGES

/usr/sbin/adduser "$USERNAME" sudo || true
echo "$HOSTNAME" > /etc/hostname
echo "%sudo ALL = (ALL) NOPASSWD: ALL" >/etc/sudoers.d/sudo-group

# Host name for next boot
cat > /etc/hosts << EOF
127.0.0.1       localhost
127.0.1.1       $HOSTNAME.localdomain       $HOSTNAME

# The following lines are desirable for IPv6 capable hosts
::1     localhost ip6-localhost ip6-loopback
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
EOF

# Let's fix it now too
hostname "$HOSTNAME"

cat > /etc/bash.bashrc << 'EOF'
# System-wide .bashrc file for interactive bash(1) shells.

# To enable the settings / commands in this file for login shells as well,
# this file has to be sourced in /etc/profile.

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, overwrite the one in /etc/profile)
# but only if not SUDOing and have SUDO_PS1 set; then assume smart user.
if ! [ -n "${SUDO_USER}" -a -n "${SUDO_PS1}" ]; then
  PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi

# Commented out, don't overwrite xterm -T "title" -n "icontitle" by default.
# If this is an xterm set the title to user@host:dir
#case "$TERM" in
#xterm*|rxvt*)
#    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'
#    ;;
#*)
#    ;;
#esac

# enable bash completion in interactive shells
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# enable mc to cd on exit using alias
. /usr/lib/mc/mc.sh

# if the command-not-found package is installed, use it
if [ -x /usr/lib/command-not-found -o -x /usr/share/command-not-found/command-not-found ]; then
	function command_not_found_handle {
	        # check because c-n-f could've been removed in the meantime
                if [ -x /usr/lib/command-not-found ]; then
		   /usr/lib/command-not-found -- "$1"
                   return $?
                elif [ -x /usr/share/command-not-found/command-not-found ]; then
		   /usr/share/command-not-found/command-not-found -- "$1"
                   return $?
		else
		   printf "%s: command not found\n" "$1" >&2
		   return 127
		fi
	}
fi
EOF
echo "Let's create SSH key for $USERNAME at $HOSTNAME"
su "$USERNAME" -c "ssh-keygen -t rsa"
